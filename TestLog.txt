Used mocha and chai for testing and experimented with jasmine.

Uses assertions for functions

Can debug on command line and step through: node inspect myscript.js, to step through.
Inserting the statement 'debugger' into source code enables breakpoints. 

API Debugging using chrome dev tools gives server responses and Postman is useful for this.

I have used junit to run tests using test data with partitioning where the limits are tested and the postconditions checked.

Defensive programming is useful to ensure incorrect inputs are not accepted and rge precondition is upheld.

I also used try catch blocks:
try {
  init();
} catch (err) {
  console.error(`Failed to run the server. ${err.message}`);
}

Added this to test to check invalid path: app.use("*", (req, res) => {
  res.status(404).send('The page does not exist on the server, please enter the correct route');
 However to test middleware needs four parameters:
 app.use((err, request, response, next) => {
  // log the error, for now just console.log
  console.log(err)
  response.status(500).send('Something broke!')
})

Some general notes.

http://localhost:4080/user/all
Returns all in users.json
http://localhost:4080/user/f9282d0a-0372-4e5a-9dda-b152e0aaf146
returns: {"id":"f9282d0a-0372-4e5a-9dda-b152e0aaf146","firstName":"Jeanette","lastName":"Patterson","email":"jpatterson@example.gov.uk","nationality":"gb","gender":"female"}
http://localhost:4080/user/query?firstName=Jeanette
returns: [{"id":"f9282d0a-0372-4e5a-9dda-b152e0aaf146","firstName":"Jeanette","lastName":"Patterson","email":"jpatterson@example.gov.uk","nationality":"gb","gender":"female"}]
